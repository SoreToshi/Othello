@using OthelloClassLibrary.Models;
@using MyOthelloClient.Models;
@using System.Text;
@page "/"
@inject IJSRuntime JS

@code {
    private Dictionary<Int32, RoomInformationForClient> OthelloRooms { get { return this.ClientManager.OthelloRooms; } }

    private Int32 OthelloRoomNumber { get { return this.ClientManager.OthelloRoomNumber; } }

    private IEnumerable<OthelloPiece> Pieces { get { return this.ClientManager.Pieces; } }

    private IEnumerable<Int32> SquareNumberListCanbePut { get { return this.ClientManager.SquareNumberListCanbePut; } }

    private GameState GameState { get { return this.ClientManager.GameState; } }

    private PlayerStatusInSelect PlayerStatus { get { return this.ClientManager.PlayerStatusInSelect; } }

    private IEnumerable<LogOfGame> LogOfGame { get { return this.ClientManager.LogOfGame; } }

    private Int32 BlackPieceCount { get { return this.ClientManager.BlackPieceCount; } }

    private Int32 WhitePieceCount { get { return this.ClientManager.WhitePieceCount; } }

    private Int32 DiffPeiceCount { get { return Math.Abs(BlackPieceCount - WhitePieceCount); } }

    private Turn CurrentTurn { get { return this.ClientManager.CurrentTurn; } }

    private Turn RetiredTurn { get { return this.ClientManager.RetiredTurn; } }

    private IEnumerable<ThemeColor> ThemeColorList { get { return this.ClientManager.ThemeColorList; } }

    private String StringOfTurn
    {
        get
        {
            return this.ClientManager.CurrentTurn == Turn.First ? "先手" : "後手";
        }
    }


    private String ThemeColorString(ThemeColor themeColor)
    {
        switch (themeColor)
        {
            case ThemeColor.Default:
                return "デフォルト";
            case ThemeColor.Dango:
                return "ダンゴ";
            case ThemeColor.Sakura:
                return "サクラ";
            case ThemeColor.Ice:
                return "アイス";
            default:
                return "存在しません";
        }
    }

    private String NumberOfConnectionsColor(Int32 numberOfConnection, GameMode gameMode)
    {
        if (gameMode == GameMode.VsHuman)
        {
            return numberOfConnection == 0 ? "back-ground-green"
             : numberOfConnection == 1 ? "back-ground-yellow" : "back-ground-red";
        }

        return numberOfConnection == 0 ? "back-ground-green" : "back-ground-red";
    }
}

@if (OthelloRoomNumber == 0)
{
    <div class="select-room-space-wrapper">
        <div class="othello-room-space">
            <div> 部屋を選んでください</div>
            @foreach (var roomInfo in this.OthelloRooms)
            {
                <div class="othello-room-space-inside @NumberOfConnectionsColor(roomInfo.Value.NumberOfConnections, roomInfo.Value.GameModeOfRoom)" @onclick="() => SelectOthelloRoom(roomInfo.Key)">
                    RoomNumber @roomInfo.Key : @roomInfo.Value.GameModeOfRoom&nbsp;
                    <div>
                        : @roomInfo.Value.NumberOfConnections/@RoomCapacity[roomInfo.Key] 人
                    </div>
                </div>
            }
            <div class="othello-room-space-inside" @onclick="() => UpdateNumberOfConnections()">更新</div>
        </div>
    </div>
}

else
{
    <div class="othello-board-wrapper @OthelloTheme">
        <div class="othello-information">
            @if (GameState == GameState.SelectSide)
            {
                <div class="select-side-space back-ground4">
                    <div class="border2" @onclick="() => StartGame(new Human(Turn.First))">Play First</div>
                    <div @onclick="() => StartGame(new Human(Turn.Second))">Play Second</div>
                </div>
                @if (PlayerStatus != PlayerStatusInSelect.Nothing)
                {
                    <div class="select-side-state back-ground4">
                        @if (PlayerStatus == PlayerStatusInSelect.CantSelect)
                        {
                            <div>選択した先攻後攻は対戦相手によって選ばれています</div>
                        }
                        @if (PlayerStatus == PlayerStatusInSelect.Waiting)
                        {
                            <div>対戦相手を待っています</div>
                        }
                    </div>
                }
            }
            @if (GameState == GameState.MatchRemaining || GameState == GameState.SelectSide)
            {
                <div class="othello-information-inside1 border1 back-ground1">
                    <div>現在のターン</div>
                    <div>@(CurrentTurn == Turn.First ? "先手" : "後手")</div>
                </div>
            }
            else if (GameState == GameState.MatchRetired)
            {
                <div class="othello-information-inside2 border1 back-ground1">
                    <div class="information-items">@(RetiredTurn == Turn.First ? "後手の勝ち" : "先手の勝ち")</div>
                    <div>&nbsp;</div>
                    <div class="information-items">@(RetiredTurn == Turn.First ? "先手" : "後手")がリタイアしました</div>
                </div>
            }
            else if (GameState == GameState.MatchOver)
            {
                <div class="othello-information-inside2 border1 back-ground1">
                    <div class="information-items">
                        @(DiffPeiceCount)枚差で
                    </div>
                    <div>&nbsp;</div>
                    <div class="information-items">
                        @if (BlackPieceCount == WhitePieceCount)
                        {
                            @:引き分け
                        }
                        else if (BlackPieceCount > WhitePieceCount)
                        {
                            @:先手の勝ち
                        }
                        else
                        {
                            @:後手の勝ち
                        }
                    </div>
                </div>
            }


            @if (GameState == GameState.MatchOver || GameState == GameState.MatchRetired)
            {
                <div class="othello-information-inside1 back-ground4 border1">
                    <div class="restart-quit-items" @onclick="() => RestartMatch()">
                        もう一度対戦
                    </div>
                </div>
            }
            else if (GameState == GameState.MatchRemaining || GameState == GameState.SelectSide)
            {
                <ul class="othello-information-inside3 border1 back-ground1">
                    @foreach (var (log, i) in LogOfGame.Select((log, i) => (log, i)))
                    {
                        <li class="log-items" @onclick="() => BackFromLog(i)">
                            @(log.Turn == Turn.First ? "先手が" : "後手が")
                            @(log.IsPass == true ? "パスしました" : $"[{log.Point.Y + 1},{log.Point.X + 1}]に石を置きました")
                        </li>
                    }
                </ul>
            }
        </div>
        <div class="othello-board">
            @foreach (var (piece, squareNumber) in Pieces.Select((piece, i) => (piece, i)))
            {
                @if (piece == null)
                {
                    @if (SquareNumberListCanbePut.Contains(squareNumber))
                    {
                        <div class="back-ground5 border4" @onclick="() => PutPiece(squareNumber)"></div>
                    }
                    else
                    {
                        <div class="border4"></div>
                    }
                }
                else
                {
                    @if (piece.Side == Side.Black)
                    {
                        <div class="border4">
                            <div class="first-piece"></div>
                        </div>
                    }
                    else
                    {
                        <div class="border4">
                            <div class="second-piece"></div>
                        </div>
                    }
                }
            }
        </div>
        <div class="othello-information">
            <div class="number-of-piece-space border3 back-ground2">
                <div class="piece-color">先手</div>
                <div class="number-of-piece">@BlackPieceCount 枚</div>
            </div>
            <div class="number-of-piece-space border3 back-ground3">
                <div class="piece-color">後手</div>
                <div class="number-of-piece">@WhitePieceCount 枚</div>
            </div>
            <div class="change-color-space back-ground4 border3">
                @foreach (var themeColor in ThemeColorList)
                {
                    <div @onclick="() => ChangeTheme(themeColor)">@ThemeColorString(themeColor)</div>
                }
            </div>
            <div class="retire-restart-space back-ground4 border3" @onclick="() => RetireMatch()">リタイア</div>
            <div class="retire-restart-space back-ground4 border3" @onclick="() => MoveToRoomSelect()">ルーム選択へ戻ります</div>
        </div>
    </div>

    @if (GameState == GameState.MatchRemaining || GameState == GameState.MatchRetired)
    {
        <button @onclick="DownloadFileFromStream">
            Download File From Stream
        </button>

        <InputFile OnChange="@UpLoadLogFile" />
    }

}